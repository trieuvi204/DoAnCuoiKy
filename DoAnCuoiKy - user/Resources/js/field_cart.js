//cart

let cartIcon = document.querySelector("#cart-icon")
let cart = document.querySelector(".cart")
let closeCart = document.querySelector("#close-cart")
//open-cart
cartIcon.onclick = () => {
	cart.classList.add("active");
}

//close-cart
closeCart.onclick = () => {
	cart.classList.remove("active");
}

//cart-working js
if (document.readyState == "loading") {
	document.addEventListener("DOMContentLoaded", ready);
}
else {
	ready();
}

//making function

function ready() {
	//remove items from cart
	var removeCartButton = document.getElementsByClassName('remove-cart')

	for (var i = 0; i < removeCartButton.length; i++) {
		var button = removeCartButton[i];
		button.addEventListener("click", removeCartItem)
	}

	//quantity changes
	var quantityInputs = document.getElementsByClassName("cart-quantity");
	for (var i = 0; i < quantityInputs.length; i++) {
		var input = quantityInputs[i];
		input.addEventListener("change", quantityChanged);
	}

	// add to cart
	var addCart = document.getElementsByClassName("add-cart");
	for (var i = 0; i < addCart.length; i++) {
		var button = addCart[i];
		button.addEventListener("click", addCartClicked);

	}
}
//remove items from cart
function removeCartItem(event) {
	var buttonClicked = event.target;
	buttonClicked.parentElement.parentElement.parentElement.remove();

	updatetotal()
}
// quantity changes

function quantityChanged(event) {
	var input = event.target;
	if (isNaN(input.value) || input.value <= 0) {
		input.value = 1;
	}
	updatetotal();
}

// addCartClicked
var ghi_chu = ''
var date = ''
var start = ''
var end = ''
function addCartClicked(event) {
	var button = event.target;
	var shopProducts = button.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement;
	console.log("üöÄ ~ addCartClicked ~ shopProducts:", shopProducts)
	var title = shopProducts.getElementsByClassName('product-title')[0].innerText;
	var priceText = shopProducts.getElementsByClassName('product-price')[0].innerText;
	var productImg = shopProducts.getElementsByClassName('product-Img')[0].src;
	var date_tmp = shopProducts.getElementsByClassName('select-date')[0].value;
	var start_tmp = shopProducts.getElementsByClassName('startMatch')[0].value;
	var end_tmp = shopProducts.getElementsByClassName('endMatch')[0].value;
	var note = shopProducts.getElementsByClassName('note')[0].value;

	var price = parseFloat(priceText.replace(/[^0-9.-]+/g, ""));

	// L∆∞u th√¥ng tin v√†o sessionStorage
	sessionStorage.setItem("khung gio", `${start_tmp} - ${end_tmp}`);
	sessionStorage.setItem("GHI_CHU", note);
	sessionStorage.setItem("NGAY_DAT_SAN", date_tmp);
	sessionStorage.setItem("GIO_BAT_DAU", start_tmp);
	sessionStorage.setItem("GIO_KET_THUC", end_tmp);

	ghi_chu = note;
	date = date_tmp;
	start = start_tmp;
	end = end_tmp;

	// Chuy·ªÉn start v√† end th√†nh ph√∫t ƒë·ªÉ t√≠nh to√°n
	function convertToMinutes(time) {
			const [hours, minutes] = time.split(':').map(Number);  // T√°ch gi·ªù v√† ph√∫t, chuy·ªÉn sang s·ªë
			return hours * 60 + minutes;  // Tr·∫£ v·ªÅ t·ªïng ph√∫t
	}

	var startInMinutes = convertToMinutes(start);
	var endInMinutes = convertToMinutes(end);
	var time = (endInMinutes - startInMinutes) / 60;
	sessionStorage.setItem("gia", price * time);

	// Ch·ªânh s·ª≠a ƒë·ªÉ l·∫•y ƒë·∫ßy ƒë·ªß gi·ªù: ph√∫t:gi√¢y
	if (start.length === 5) {
			start = start + ":00"; // Th√™m gi√¢y v√†o n·∫øu kh√¥ng c√≥ gi√¢y
	}
	if (end.length === 5) {
			end = end + ":00"; // Th√™m gi√¢y v√†o n·∫øu kh√¥ng c√≥ gi√¢y
	}

	// Ki·ªÉm tra ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi ti·∫øp t·ª•c
	if (new Date(date_tmp) <= new Date()) {
			Swal.fire({
					icon: 'error',
					text: 'Ng√†y ƒë·∫∑t ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i.',
			});
			return;
	}


	if (startInMinutes >= endInMinutes) {
			Swal.fire({
					icon: 'error',
					text: 'Gi·ªù b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n gi·ªù k·∫øt th√∫c.',
			});
			return;
	}

	Swal.fire({
		icon: 'success',
		text: 'Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng.',
});
	// N·∫øu ƒëi·ªÅu ki·ªán h·ª£p l·ªá, ti·∫øp t·ª•c th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
	addProductToCart(title, price, productImg, date, start, end, note, time);
	updatetotal();
}




function addProductToCart(title, price, productImg, date, start, end, note, time) {
	var cartShopBox = document.createElement('div');
	cartShopBox.classList.add('cart-box')
	var cartItems = document.getElementsByClassName('cart-content')[0];
	var cartItemsNames = cartItems.getElementsByClassName('cart-product-title');
	for (var i = 0; i < cartItemsNames.length; i++) {
		if (cartItemsNames[i].innerText === title) {
			Swal.fire({
				icon: 'error',
				text: 'B·∫°n ƒë√£ th√™m v·∫≠t ph·∫©m n√†y v√†o gi·ªè h√†ng !!!!',
		});
			return;
		}
	}
	
	var cartBoxContent = `
                        <div class="row">
                            <div class = "col-lg-12 cart-inf-container">
                                <div class="cart-img">
                                <img src="${productImg}" alt="cart-img" id="cart-img">
                            </div>
                            <div class="cart-inf">
                                <div class="col-lg-6 left">
                                    <div class="row">
                                        <div class = "cart-product-title" id="ten_san">${title}</div>
                                    </div>
                                    <div class="row">
                                        <div class="cart-product-date" id = "ngay_dat_san">Ng√†y: ${date}</div>
                                    </div>
																		<div class="row">
                                        <div class="cart-product-time " id = "gio_bd">B·∫Øt ƒë·∫ßu: ${start}</div>
                                    </div>
                                    <div class="row">
                                        <div class="cart-product-timeOption " id = "gio_kt">K·∫øt Th√∫c: ${end}</div>
                                    </div>
                                </div>
                                <div class="col-lg-6 right">
                                    <div class="row">
                                        <div class = "cart-product-price " id = "">${price * time}</div>
                                    </div>
                                    <div class="row">
                                        <div class="cart-product-note " id = "ghi_chu">Ghi ch√∫: ${note}</div>
                                    </div>
                                </div>
                                </div>
                            </div>
                            <div class="col-lg-12 remove-cart-container">
                                <i class="fa-regular fa-trash-can remove-cart"></i>
                            </div>
                        </div>`;
	cartShopBox.innerHTML = cartBoxContent;

	cartItems.append(cartShopBox);
	cartShopBox.getElementsByClassName('remove-cart')[0].addEventListener('click', removeCartItem);
}







// update total

function updatetotal() {
	var carContent = document.getElementsByClassName("cart-content")[0];
	var cartBoxes = document.getElementsByClassName("cart-box");
	var total = 0;
	for (var i = 0; i < cartBoxes.length; i++) {
		var cartBox = cartBoxes[i];
		var priceElement = cartBox.getElementsByClassName("cart-product-price")[0];

		var price = parseFloat(priceElement.innerText.replace("ƒë", "").replace(/\./g, ''))
		total = total + price;
	}
	document.getElementsByClassName("total-price")[0].innerText = total.toLocaleString('vi-vn') + "ƒë";
}



const url_getAll = 'http://localhost:8000/san/module/v1/san/all';
const url_getOne = 'http://localhost:8000/loaisan/module/v1/loaisan/all';
const option = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json'
    }
};

// T√™n s√¢n ho·∫∑c ID s√¢n b·∫°n mu·ªën t√¨m
const targetFieldCode = sessionStorage.getItem("ma_san");


fetch(url_getAll, option)
	.then(response => {
		if (!response.ok) {
				return response.json().then(errorData => {
						throw new Error(errorData.detail || 'L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß');
				});
		}
		return response.json();
	})
	.then(data => {
		const selectedField = data.find(item => item.ma_san === targetFieldCode);

	sessionStorage.setItem("ten_san", selectedField.ten_san);

		if (selectedField) {
				// C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ url_getAll
				document.querySelector('.product-title').textContent = selectedField.ten_san;
				document.querySelector('.product-Img').src = `../../../img/field_list/${selectedField.ma_san}.jpg`;
				document.querySelector('.product-price').textContent = `${selectedField.price}ƒë`;
				document.querySelector('.right:nth-child(2)').textContent = selectedField.openTime;

				// Fetch th√™m th√¥ng tin t·ª´ url_getOne
				return fetch(url_getOne, option)
						.then(response => {
								if (!response.ok) {
										return response.json().then(errorData => {
												throw new Error(errorData.detail || 'L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß');
										});
								}
								return response.json();
						})
						.then(loaisanData => {
								// T√¨m th√¥ng tin lo·∫°i s√¢n t∆∞∆°ng ·ª©ng v·ªõi ma_san
								const fieldType = loaisanData.find(item => item.ma_san === targetFieldCode);

								if (fieldType) {
										// Hi·ªÉn th·ªã th√¥ng tin t·ª´ url_getOne
										document.querySelector('.loaimatco').textContent += fieldType.loai_mat_co;
										document.querySelector('.kichthuocsan').textContent = fieldType.kich_thuoc_san;
										document.querySelector('.product-price').textContent = `${fieldType.gia_san}ƒë`;
								} else {
										Swal.fire({
												icon: 'warning',
												title: 'Kh√¥ng t√¨m th·∫•y lo·∫°i s√¢n',
												text: `Kh√¥ng c√≥ th√¥ng tin lo·∫°i s√¢n ph√π h·ª£p v·ªõi m√£: ${targetFieldCode}`,
										});
								}
						});
		} else {
				Swal.fire({
						icon: 'warning',
						title: 'Kh√¥ng t√¨m th·∫•y s√¢n',
						text: `Kh√¥ng c√≥ s√¢n n√†o ph√π h·ª£p v·ªõi m√£: ${targetFieldCode}`,
				});
		}
	})
	.catch(error => {
		Swal.fire({
				icon: 'error',
				title: 'ƒê√£ x·∫£y ra l·ªói',
				text: 'L·ªói: ' + error.message,
		});
	});


	const url_orders = 'http://localhost:8000/orders/module/v1/orders/create';
	handleCreatePDS();


	
	function handleCreatePDS() {
		var createBtn = document.querySelector('button.pay-btn');
		createBtn.onclick = function(event) {
			event.preventDefault(); // NgƒÉn ch·∫∑n h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa n√∫t
			
			// L·∫•y gi√° tr·ªã t·ª´ c√°c input
			
			const ma_kh = sessionStorage.getItem("ma_kh");
      var formDataStaff = {
				ma_kh: ma_kh,
        ghi_chu: ghi_chu
      };			
      createPDS(formDataStaff);
    }
  }
	
	function createPDS (data) {
		var option = {
			method: 'POST',
			headers: {
				'content-Type': 'application/json'
			},
			body: JSON.stringify(data)
		};
	
	
		fetch(url_orders, option)
		.then(function (response) {
			// Ki·ªÉm tra xem response c√≥ th√†nh c√¥ng (status 200) kh√¥ng
			if (!response.ok) {
				return response.json().then(errorData => {
					// Tr·∫£ v·ªÅ l·ªói chi ti·∫øt n·∫øu c√≥
					throw new Error(errorData.detail || 'L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß');
				});
			}
			return response.json(); // L·∫•y d·ªØ li·ªáu JSON t·ª´ response n·∫øu th√†nh c√¥ng
		})
		.then(function (response) {
			const ma_pds = response.ma_pds; // L·∫•y m√£ phi·∫øu ƒë·∫∑t s√¢n t·ª´ response
			sessionStorage.setItem('ma_pds', ma_pds);
			window.location.href = '../../pay/pay.html'
		})
		.catch(function (error) {
			// Hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
			Swal.fire({
				icon: "error",
				text: "Registration failed	. Error: " + error.message,
			});
		});
	}
	
	
	